package uk.ac.ucl.jsh.Utilities;

import uk.ac.ucl.jsh.Parser.SeqNode;
import uk.ac.ucl.jsh.Parser.PipeNode;

import java.io.InputStream;
import java.io.OutputStream;

import uk.ac.ucl.jsh.Parser.CallNode;

/**
 * Interface that provides the needed functions to visit the Parse Tree generated by the Parser.
 * 
 * @param <T> The interface uses generics since there may be different types of visitor on the Parse Tree.
 */
public interface TreeVisitor<T> {
    /**
     * Function that visits a seqNode in the Parse tree
     * 
     * @param seqNode       The sequence Node that will be visited
     * @param inputStream   The stream that will be used by seqNodes' two children as input stream
     * @param outputStream  The stream that will be used by seqNodes' two children as output stream
     * @return              Generic type based on the visitor that implements the interface
     * @throws JshException The exception that may be thrown if the visitor runs an Applications
     */
    T visit(SeqNode seqNode,   InputStream inputStream, OutputStream outputStream) throws JshException;
    /**
     * Function that visits a pipeNode in the Parse tree
     * 
     * @param pipeNode      The pipe Node that will be visited
     * @param inputStream   The stream that the left child of pipeNode should use as an input stream
     * @param outputStream  The stream that the right child of pipeNode should use as an output stream
     * @return              Generic type based on the visitor that implements the interface
     * @throws JshException The exception that may be thrown if the visitor runs an Applications
     */
    T visit(PipeNode pipeNode, InputStream inputStream, OutputStream outputStream) throws JshException;
    /**
     * Function that visits a callNode in the Parse tree
     * 
     * @param callNode      The call Node that will be visited
     * @param inputStream   The stream that the callNode should use as an input stream
     * @param outputStream  The stream that the callNode should use as an output stream
     * @return              Generic type based on the visitor that implements the interface
     * @throws JshException The exception that may be thrown if the visitor runs an Applications
     */
    T visit(CallNode callNode, InputStream inputStream, OutputStream outputStream) throws JshException;
}