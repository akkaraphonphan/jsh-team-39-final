package uk.ac.ucl.jsh.Parser;

import java.io.InputStream;
import java.io.OutputStream;

import uk.ac.ucl.jsh.Utilities.JshException;
import uk.ac.ucl.jsh.Utilities.ToStringVisitor;
import uk.ac.ucl.jsh.Utilities.TreeVisitor;

/**
 * The abstract class representing the elements that form the Parse tree generated by the Parser class.
 */
public abstract class Node {
    /**
     * Method that allows the usage of the vistor pattern
     * 
     * @param <T>           Generic type for the TreeVisitor
     * @param treeVisitor   Instance of a TreeVisitor
     * @param inputStream   The input stream that should be used by the Node if there is no I/O redirection
     * @param outputStream  The output stream that should be used by the Node if there is no I/O redirection
     * @return              Generic, depending on the type of Visitor
     * @throws JshException Exception that could be thrown if the TreeVisitor' accept method throws it
     */
    public abstract <T> T accept(TreeVisitor<T> treeVisitor, InputStream inputStream, OutputStream outputStream) throws JshException;

    @Override
    /**
     * Method used to generate the String representation of a Node
     * 
     */
    public String toString() {
        try {
            return this.accept(new ToStringVisitor(), null, null);
        } catch (JshException e) {
            return "";
        }
    }
}